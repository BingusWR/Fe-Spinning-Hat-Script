local Players = game:GetService("Players") 
local RunService = game:GetService("RunService")
local TextChatService = game:GetService("TextChatService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local targetPlayer
local isResettingManually = Instance.new("BoolValue")
isResettingManually.Name = "IsResettingManually"
isResettingManually.Value = false
isResettingManually.Parent = player

local spinSpeed = 30 -- This variable holds the current spin speed
local radius = 5
local angle = 0
local spinningConnection -- This will hold the connection for the spinning effect
local commandAccess = {} -- Table to store players with access to hat commands
local viewingPlayer -- This will store the player being viewed

local function findPlayerByName(partialName)
    partialName = string.lower(partialName)
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if string.find(string.lower(otherPlayer.Name), partialName) or string.find(string.lower(otherPlayer.DisplayName), partialName) then
            return otherPlayer
        end
    end
    return nil -- Return nil if no player found
end

local function spinAccessoriesAroundPlayer(targetPlayer)
    if spinningConnection then
        spinningConnection:Disconnect() -- Stop previous spinning effect
    end

    local accessories = {}

    for _, accessory in ipairs(character:GetChildren()) do
        if accessory:IsA("Accessory") then
            table.insert(accessories, accessory)
        end
    end

    spinningConnection = RunService.Heartbeat:Connect(function(deltaTime)
        angle = angle + (spinSpeed * deltaTime)

        for i, accessory in ipairs(accessories) do
            local offsetAngle = angle + (math.pi * 2 / #accessories) * i
            local offsetX = math.cos(offsetAngle) * radius
            local offsetZ = math.sin(offsetAngle) * radius

            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetPlayer.Character.HumanoidRootPart.Position + Vector3.new(offsetX, 2, offsetZ)
                accessory.Handle.CFrame = CFrame.new(targetPosition) * CFrame.Angles(0, offsetAngle, 0)
            end
        end
    end)
end

local function forceReset()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid:TakeDamage(player.Character.Humanoid.MaxHealth)
    end
end

local function startResetLoop()
    while true do
        if isResettingManually.Value then
            forceReset()
        end
        wait(1)
    end
end

local function viewPlayer(targetPlayer)
    local camera = workspace.CurrentCamera
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        viewingPlayer = targetPlayer
        camera.CameraSubject = targetPlayer.Character.Humanoid -- Set the camera to follow the target player's Humanoid
        print("Now viewing: " .. targetPlayer.Name)
    end
end

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    wait(1)
    if targetPlayer then
        spinAccessoriesAroundPlayer(targetPlayer)
        if isResettingManually.Value then
            viewPlayer(targetPlayer) -- Continue viewing the target player after reset
        end
    end
end)

local function handleChatMessage(message, player)
    local messageSender = message.TextSource.UserId
    
    if messageSender == player.UserId or commandAccess[messageSender] then
        if string.sub(message.Text, 1, 6) == ";speed" then
            local newSpeed = tonumber(string.sub(message.Text, 8))
            if newSpeed then
                spinSpeed = newSpeed
                print("Spin speed set to " .. newSpeed)
            end
        end

        if string.sub(message.Text, 1, 3) == ";ra" then
            local newRadius = tonumber(string.sub(message.Text, 5))
            if newRadius then
                radius = newRadius
                print("Radius set to " .. newRadius)
            end
        end

        if string.sub(message.Text, 1, 2) == ";a" then
            local newAngle = tonumber(string.sub(message.Text, 4))
            if newAngle then
                angle = newAngle
                print("Angle set to " .. newAngle)
            end
        end

        if string.sub(message.Text, 1, 2) == ";h" then
            local partialName = string.sub(message.Text, 4)
            if partialName then
                local foundPlayer = findPlayerByName(partialName)
                if foundPlayer then
                    targetPlayer = foundPlayer
                    isResettingManually.Value = true -- Set to true to enable continuous resetting
                    print("Target player set to " .. foundPlayer.Name)
                    spinAccessoriesAroundPlayer(targetPlayer) -- Start spinning with the current speed
                    viewPlayer(targetPlayer) -- Start viewing the target player
                else
                    print("No player found with name part: " .. partialName)
                end
            end
        end

        if string.sub(message.Text, 1, 5) == ";view" then
            local partialName = string.sub(message.Text, 7)
            if partialName then
                local foundPlayer = findPlayerByName(partialName)
                if foundPlayer then
                    viewPlayer(foundPlayer) -- Start viewing the target player
                else
                    print("No player found with name part: " .. partialName)
                end
            end
        end
    end

    if string.sub(message.Text, 1, 8) == ";givecmd" then
        local partialName = string.sub(message.Text, 10)
        if partialName then
            local foundPlayer = findPlayerByName(partialName)
            if foundPlayer then
                commandAccess[foundPlayer.UserId] = true -- Grant this player access to hat commands
                print("Gave command access to " .. foundPlayer.Name)
                local privateMessage = "/w " .. foundPlayer.Name .. " Here are the commands you can use: ;speed [number] ;ra [radius] ;a [angle]"
                game:GetService("Chat"):Chat(player.Character.Head, privateMessage, Enum.ChatColor.Red)
            else
                print("No player found with name part: " .. partialName)
            end
        end
    end
end

TextChatService.OnIncomingMessage = function(message)
    if message.TextSource and message.TextSource.UserId then
        handleChatMessage(message, player)
    end
end

coroutine.wrap(startResetLoop)()
